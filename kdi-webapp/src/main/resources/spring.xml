<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
        	http://www.springframework.org/schema/aop
        	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee
			http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">



    <!-- 属性文件读入 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true" />
    </bean>

    <!-- 数据源定义,使用c3p0 连接池
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialPoolSize" value="${cpool.minPoolSize}"/>
        <property name="minPoolSize" value="${cpool.minPoolSize}" />
        <property name="maxPoolSize" value="${cpool.maxPoolSize}" />
        <property name="acquireIncrement" value="${cpool.acquireIncrement}" />
        <property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
    </bean>
    -->
    <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${cpool.minPoolSize}" />
        <property name="minIdle" value="${cpool.minPoolSize}" />
        <property name="maxActive" value="${cpool.maxPoolSize}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="${jdbc.testSql}" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>


    <!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
            <constructor-arg ref="dataSource"></constructor-arg>
      </bean>-->

    <!-- 将连接池注入 jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="connectionPoolTools" class="com.auphi.ktrl.schedule.tools.ConnectionPoolTools">
        <property name="jdbcTemplate">
            <ref bean="jdbcTemplate" />
        </property>
    </bean>


    <!-- 配置事务管理器，注意这里的dataSource和SqlSessionFactoryBean的dataSource要一致，不然事务就没有作用了 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>


    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- myBatis文件 -->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations">
            <list>
                <value>classpath:com/auphi/ktrl/**/domain/maps/*.xml</value>
                <value>classpath:cn/skyform/data/hub/domain/maps/*.xml</value>
            </list>
        </property>
        <property name="configLocation" value="classpath:/mybatis.xml"/>
    </bean>

    <bean id="kettleEnvironment" class="org.pentaho.di.core.KettleEnvironment" init-method="init"/>

    <bean id="databaseMeta" class="org.pentaho.di.core.database.DatabaseMeta">

        <constructor-arg index="0" value="${Meta.kettle_db_type}"/>
        <constructor-arg index="1" value="${Meta.db_type}"/>
        <constructor-arg index="2" value="${Meta.db_drive_type}"/>
        <constructor-arg index="3" value="${Meta.db_ip}"/>
        <constructor-arg index="4" value="${Meta.db_name}"/>
        <constructor-arg index="5" value="${Meta.db_port}"/>
        <constructor-arg index="6" value="${Meta.db_user}"/>
        <constructor-arg index="7" value="${Meta.db_password}"/>
    </bean>


    <bean id="kettleDatabaseRepositoryMeta" class="com.auphi.data.hub.service.MyKettleDatabaseRepositoryMeta">
        <constructor-arg name="id" value="kettle"/>
        <constructor-arg name="name" value="kettle"/>
        <constructor-arg name="description" value="Transformation description"/>
        <constructor-arg name="connection" ref="databaseMeta" />

    </bean>



    <context:annotation-config />
    <context:component-scan base-package="com.auphi.data.hub.dao" />
    <context:component-scan base-package="com.auphi.data.hub.service" />
    <context:component-scan base-package="com.auphi.data.hub.core.idgenerator" />
    <context:component-scan base-package="com.auphi.data.hub"/>
    <context:component-scan base-package="com.auphi.ktrl.mdm.service" />
    <context:component-scan base-package="com.auphi.ktrl.mdm" />
    <context:component-scan base-package="com.auphi.ktrl.quality.*" />


    <!-- 配置拦截的包及方法名称 -->
    <aop:config>
        <aop:pointcut id="basicManagerOperation"
                      expression="execution(public * com.auphi.data.hub.service..*.*save*(..)) or execution(public * com.auphi.data.hub.service..*.*update*(..))  or execution(public * com.auphi.data.hub.service..*.*delete*(..)) " />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="basicManagerOperation" />
    </aop:config>


    <!-- 设置事物处理方式 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="query*" read-only="true" />
            <tx:method name="get*" read-only="true" />
        </tx:attributes>
    </tx:advice>




    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieMaxAge" value="604800"/>
        <property name="defaultLocale" value="zh_CN"/>
        <property name="cookieName" value="Language"></property>
    </bean>


</beans>