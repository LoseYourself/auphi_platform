 Ext.onReady(function() {	// 定义列模型		var sm = new Ext.grid.CheckboxSelectionModel();		var rownum = new Ext.grid.RowNumberer( {			header : 'NO',			width : 28		});		var cm = new Ext.grid.ColumnModel( [ rownum, sm, 		{			header : 'id',			dataIndex : 'id',			hidden : true		},{			header : '数据模型id', 			dataIndex : 'id_model', 			hidden : true		},{			header : '数据模型', 			dataIndex : 'id_model_show', 			hidden : false		},{			header : '模型属性', 			dataIndex : 'attribute_model', 			sortable : true,			width : 100		}, {			header : '主数据源编码',			dataIndex : 'mdm_id_database',			hidden : true		}, {			header : '主数据源名称',			dataIndex : 'mdm_id_database_show',			sortable : true,			width : 100		}, {			header : '主数据模式名称',			dataIndex : 'mdm_schema_name',			sortable : true,			hidden : true		},{			header : '主数据表名', 			dataIndex : 'mdm_table_name', 			sortable : true,			width : 100		},{			header : '主键字段', 			dataIndex : 'mdm_primary_key', 			sortable : true,			width : 100		},{			header : '名称字段', 			dataIndex : 'mdm_column_name', 			sortable : true,			width : 100		},{			header : '过滤条件', 			dataIndex : 'mdm_where_condition', 			sortable : true,			hidden : true		},{			header : '映射方式', 			dataIndex : 'maping_mode', 			sortable : true,			width : 100		},{			header : '映射表数据源', 			dataIndex : 'maping_id_database_show', 			sortable : true,			width : 100		},{			header : '映射表模式名', 			dataIndex : 'maping_schema_name', 			sortable : true,			hidden : true		},{			header : '映射表名', 			dataIndex : 'maping_table_name', 			sortable : true,			width : 100		} ]);				 		var store = new Ext.data.Store( {			proxy : new Ext.data.HttpProxy( {				url : '../mdmDataClean/query.shtml'			}),			reader : new Ext.data.JsonReader( {				totalProperty : 'total',				root : 'rows' 			}, [ {					name : 'id' 				}, {					name : 'id_model' 				},{					name : 'id_model_show' 				}, {					name : 'attribute_model' 				}, {					name : 'mdm_id_database'				}, {					name : 'mdm_id_database_show'				}, {					name : 'mdm_schema_name'				}, {					name : 'mdm_table_name'				},{					name : 'mdm_primary_key'				},{					name : 'mdm_column_name'				},{					name :'mdm_where_condition'				},{					name : 'maping_mode'				},{					name : 'maping_id_database'				},{					name : 'maping_id_database_show'				},{					name : 'maping_schema_name'				},{					name : 'maping_table_name'				}]),			listeners: {				datachanged: function() {					//autoCheckGridHead(Ext.getCmp('id_grid_sfxm'));				}			}		});		store.load( {			params : {				start : 0,				limit : 20			}		});				var pagesize_combo = new Ext.form.ComboBox({			name : 'pagesize',			hiddenName : 'pagesize',			typeAhead : true,			triggerAction : 'all',			lazyRender : true,			mode : 'local',			store : new Ext.data.ArrayStore({						fields : ['value', 'text'],						data : [[10, '10条/页'], [20, '20条/页'],								[50, '50条/页'], [100, '100条/页'],								[250, '250条/页'], [500, '500条/页']]					}),			valueField : 'value',			displayField : 'text',			value : '50',			editable : false,			width : 85		});						var number = parseInt(pagesize_combo.getValue());		// 改变每页显示条数reload数据		pagesize_combo.on("select", function(comboBox) {			bbar.pageSize = parseInt(comboBox.getValue());			number = parseInt(comboBox.getValue());			store.reload( {				params : {					start : 0,					limit : bbar.pageSize				}			});		});		// 分页工具栏		var bbar = new Ext.PagingToolbar( {			pageSize : number,			store : store,			displayInfo : true,			displayMsg : '显示{0}条到{1}条,共{2}条',			plugins : new Ext.ux.ProgressBarPager(), // 分页进度条			emptyMsg : "没有符合条件的记录",			items : [ '-', '&nbsp;&nbsp;', pagesize_combo ]		});		// 表格工具栏		var tbar = new Ext.Toolbar({			items : [{						text : '新增',						iconCls : 'page_addIcon',						id : 'id_tbi_add',						handler : function() {							addItem();						}					},'-',{						text : '删除',						id : 'tbi_del',						iconCls : 'page_delIcon',						handler : function() {							if(checkBeforeDelete(grid)) {								deleteItem();							}						}					},'-',{						text : '编辑',						id : 'tbi_edit',						iconCls : 'page_edit_1Icon',						handler : function() {							updateItem();						}					}]		});		// 表格实例		var grid = new Ext.grid.GridPanel( {			height : 500,			id : 'id_grid_sfxm',			autoScroll : true,			frame : true,			region : 'center', 			store : store, 			viewConfig : {				forceFit : true			},			stripeRows : true, 			cm : cm, 			sm : sm,			tbar : tbar, 			bbar : bbar,			loadMask : {				msg : '正在加载表格数据,请稍等...'			}		});		// 监听行选中事件		grid.on('rowclick', function(pGrid, rowIndex, event) {			Ext.getCmp('tbi_edit').enable();			Ext.getCmp('tbi_del').enable();		});		grid.on('rowdblclick', function(grid, rowIndex, event) {			updateItem();		});				//模型		var mdMmodelStore = new Ext.data.JsonStore({			fields: ['id_model', 'model_name'],			url : "../mdmModel/query4ComboBox.shtml",			autoLoad:true,			root : ""		});				var mdMmodelComboBox = new Ext.form.ComboBox({			fieldLabel : '数据模型',			emptyText:'请选择数据模型',			regexText:"数据模型不能为空!",			hiddenName : "id_model",			forceSelection: true,			anchor : '100%',    		store: mdMmodelStore,			valueField : "id_model",			displayField : "model_name",			typeAhead: true,			editable:false,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : false,			listeners: {      				select : function(mdMmodelComboBox, record,index){ 					var id_model = mdMmodelComboBox.value;					mdmModelAttributeStore.load({						params : {							id_model : id_model,						}					});				}    			}    					});					var mdmModelAttributeStore = new Ext.data.JsonStore({			fields: ['value', 'text'],			url : "../mdmDataClean/getMdmModelAttribute.shtml",			autoLoad:true,			root : ""		});						var mdmModelAttributeComboBox = new Ext.form.ComboBox({			fieldLabel : '模型属性',			emptyText:'请选择数据模型属性',			regexText:"数据模型属性不能为空!",			hiddenName : "attribute_model",			forceSelection: true,			anchor : '100%',    		store: mdmModelAttributeStore,    		valueField : "value",			displayField : "text",			typeAhead: true,			editable:false,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : false,			listeners: {      				select : function(modelComboBox, record,index){ 					maping_failure_cm_store.load({						params : {							dataModel:mdMmodelComboBox.value,modelAttribute:mdmModelAttributeComboBox.value						}					});					maping_success_cm_store.load({						params : {							dataModel:mdMmodelComboBox.value,modelAttribute:mdmModelAttributeComboBox.value						}					});				}    			}    					});							// 主数据数据源		var mdmDatasourceStore = new Ext.data.JsonStore({			fields: ['sourceId', 'sourceName'],			url : "../datasource/getDataSourceList.shtml",			autoLoad:true,			root : ""		});				// 主数据数据源		var mdmDatasourceComboBox = new Ext.form.ComboBox({			fieldLabel : '数据源',			emptyText:'请选择数据源',			hiddenName : "mdm_id_database",			forceSelection: true,			anchor : '100%',    		store: mdmDatasourceStore,			valueField : "sourceId",			displayField : "sourceName",			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : false,			editable:false,			listeners: {      				select : function(mdmDatasourceComboBox, record,index){ 					mdmSchemaNameComboBox.clearValue();					mdmTableNameComboBox.clearValue();					var id_database = mdmDatasourceComboBox.value;					mdmSchemaNameStore.load({						params : {id_database : id_database},						callback:function(r,options,success){							mdmTableNameStore.load({								params : {									id_database : id_database,									schema_name : ""								}							});						}					});									}    			}    					});											//主数据模式名		var mdmSchemaNameStore = new Ext.data.JsonStore({			fields: ['value', 'text'],			url : "../mdmTable/getSchemaName.shtml",			autoLoad:true,			root : ""		});								//主数据模式名		var mdmSchemaNameComboBox = new Ext.form.ComboBox({			fieldLabel : '模式名',			emptyText:'请选择模式名',			hiddenName : "mdm_schema_name",			forceSelection: false,			anchor : '100%',    		store: mdmSchemaNameStore,			valueField : "value",			displayField : "text",			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : true,			editable:false,			listeners: {      				select : function(mdmSchemaNameComboBox, record,index){ 					var schemaName = mdmSchemaNameComboBox.value;					mdmTableNameStore.load({						params : {							id_database : mdmDatasourceComboBox.value,							schema_name : schemaName						}					});				}    			}    					});							//表名		var mdmTableNameStore = new Ext.data.JsonStore({			fields: ['value', 'text'],			url : "../mdmTable/getTableName.shtml",			autoLoad:true,			root : ""		});						var mdmTableNameComboBox = new Ext.form.ComboBox({			id : 'table_name_comboBox',			name :'table_name_comboBox',			fieldLabel : '表名',			emptyText:'请选择表名',			hiddenName : "mdm_table_name",			forceSelection: true,			anchor : '100%',    		store: mdmTableNameStore,			valueField : "value",			displayField : "text",			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : false,			editable:false,			listeners: {      				select : function(mdmTableNameComboBox, record,index){ 					columnPrimaryKeyComboBox.clearValue();					columnNameComboBox.clearValue();					var tableName = mdmTableNameComboBox.value;					var schemaName = mdmSchemaNameComboBox.value					if(schemaName!=null && schemaName!=""){						tableName = schemaName+"."+tableName;					}					tableColumnStore.load({						params : {							id_database : mdmDatasourceComboBox.value,							tableName : tableName						}					});																			}    			}    					});																	//根据表名获取表字段		var tableColumnStore = new Ext.data.JsonStore({			fields: ['value', 'text'],			url : "../mdmTable/getTableColumn.shtml",			autoLoad:true,			root : ""		});						//主键字段		var columnPrimaryKeyComboBox = new Ext.form.ComboBox({			id : 'table_primary_key_combobox',			name :'table_primary_key_combobox',			fieldLabel : '主键字段',			emptyText:'请选择主键字段',			hiddenName : "mdm_primary_key",			forceSelection: true,			anchor : '100%',    		store: tableColumnStore,			valueField : "value",			displayField : "text",			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : false,			editable:false,			listeners: {      				select : function(columnPrimaryKeyComboBox, record,index){ 									}    			}    					});					//,字段		var columnNameComboBox = new Ext.form.ComboBox({			id : 'column_name_combobox',			name :'column_name_combobox',			fieldLabel : '名称字段',			emptyText:'请选择名称字段',			hiddenName : "mdm_column_name",			forceSelection: true,			anchor : '100%',    		store: tableColumnStore,			valueField : "value",			displayField : "text",			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : false,			editable:false,			listeners: {      				select : function(columnNameComboBox, record,index){ 									}    			}    					});							// 映射数据源		var mapingDatasourceStore = new Ext.data.JsonStore({			fields: ['sourceId', 'sourceName'],			url : "../datasource/getDataSourceList.shtml",			autoLoad:true,			root : ""		});				// 映射数据源		var mapingDatasourceComboBox = new Ext.form.ComboBox({			fieldLabel : '数据源',			emptyText:'请选择数据源',			hiddenName : "maping_id_database",			forceSelection: true,			anchor : '100%',    		store: mapingDatasourceStore,			valueField : "sourceId",			displayField : "sourceName",			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : false,			editable:false,			listeners: {      				select : function(mapingDatasourceComboBox, record,index){ 					mapingSchemaNameComboBox.clearValue();					var id_database = mapingDatasourceComboBox.value;					mapingSchemaNameStore.load({						params : {id_database : id_database}					});				}    			}    					});			//映射模式名		var mapingSchemaNameStore = new Ext.data.JsonStore({			fields: ['value', 'text'],			url : "../mdmTable/getSchemaName.shtml",			autoLoad:true,			root : ""		});				//映射模式名		var mapingSchemaNameComboBox = new Ext.form.ComboBox({			fieldLabel : '模式名',			emptyText:'请选择模式名',			hiddenName : "maping_schema_name",			forceSelection: false,			anchor : '100%',    		store: mapingSchemaNameStore,			valueField : "value",			displayField : "text",			typeAhead: true,			mode: 'local',			triggerAction: 'all',			selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录			allowBlank : true,			editable:false,			listeners: {      				select : function(mapingSchemaNameComboBox, record,index){ 					var schemaName = mapingSchemaNameComboBox.value;				}    			}    					});							var maping_success_store = new Ext.data.Store( {			proxy : new Ext.data.HttpProxy( {				url : '../mdmDataClean/getMapingResults.shtml'			}),			reader : new Ext.data.JsonReader( {				totalProperty : 'total',				root : 'rows' 			}, [ {					name : 'id' 				}, {					name : 'original_key' 				}, {					name : 'original_name' 				}, {					name : 'standard_name'				}, {					name : 'standard_key'				}				])		});				// 标准值		var maping_success_cm_store = new Ext.data.JsonStore({			fields: ['value', 'text'],			url : "../mdmDataClean/getStandardName.shtml",			autoLoad:false,			root : ""		});				var value_success = "";		var maping_success_cm = new Ext.grid.ColumnModel( [ 		        {header : 'id',dataIndex : 'id',hidden : true},		        {header : '原主键',dataIndex : 'original_key',sortable : true},		        {header : '原值',dataIndex : 'original_name',sortable : true},		        {		        	header : '标准值',		        	dataIndex : 'standard_name',		        	sortable : true,		        	editor: new Ext.form.ComboBox({  							forceSelection: true,							anchor : '100%',				    		store: maping_success_cm_store,				    		valueField : "text",							displayField : "text",							typeAhead: true,							editable:false,							mode: 'local',							triggerAction: 'all',							selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录							allowBlank : false,							listeners: {      								select : function(mapingSchemaNameComboBox, record,index){ 									value_success = maping_success_cm_store.getAt(index).get('value')								}    							}    			            })		        },		        {header : '标准主键',dataIndex : 'standard_key',sortable : true}		        		    ]);				var maping_success = new Ext.grid.EditorGridPanel( {			height : 220,			id : 'id_maping_success',			autoScroll : true,			region : 'center', 			store : maping_success_store, 			viewConfig : {				forceFit : true			},			cm : maping_success_cm, 			//bbar:preview_bbar,			loadMask : {				msg : '正在加载表格数据,请稍等...'			},			listeners: { 	            afteredit: function(val) { 	            	console.log(val);            		if(val.value==""){	            		val.record.set("standard_name", originalValue);	            	}else{	            		val.record.set("standard_key", value_success);	            		var  paramValue = {id:val.record.data.id,standard_key:value_success,standard_name:val.value,falg:"1"};	            		updateDataMaping(paramValue);	            	}	                	            }	        }		});				var maping_failure_store = new Ext.data.Store( {			proxy : new Ext.data.HttpProxy( {				url : '../mdmDataClean/getMapingResults.shtml'			}),			reader : new Ext.data.JsonReader( {				totalProperty : 'total',				root : 'rows' 			}, [ {					name : 'id' 				}, {					name : 'original_key' 				}, {					name : 'original_name' 				}, {					name : 'standard_name'				}, {					name : 'standard_key'				}				])		});				// 标准值		var maping_failure_cm_store = new Ext.data.JsonStore({			fields: ['value', 'text'],			url : "../mdmDataClean/getStandardName.shtml",			autoLoad:false,			root : ""		});				var value_failure="";				var maping_failure_cm = new Ext.grid.ColumnModel( [ 		        {header : 'id',dataIndex : 'id',hidden : true},				{header : '原主键',dataIndex : 'original_key',sortable : true},				{header : '原值',dataIndex : 'original_name',sortable : true},				{					header : '标准值',					dataIndex : 'standard_name',					sortable : true,					editor: new Ext.form.ComboBox({  							forceSelection: true,							anchor : '100%',				    		store: maping_failure_cm_store,				    		valueField : "text",							displayField : "text",							typeAhead: true,							editable:false,							mode: 'local',							triggerAction: 'all',							selectOnFocus : true,// 设置用户能不能自己输入,true为只能选择列表中有的记录							allowBlank : false,							listeners: {      								select : function(mapingSchemaNameComboBox, record,index){ 																		value_failure = maping_failure_cm_store.getAt(index).get('value')								}    							}    			            }) 									},				{header : '标准主键',dataIndex : 'standard_key',sortable : true}		    ]);				var maping_failure = new Ext.grid.EditorGridPanel( {			height : 220,			id : 'id_maping_failure',			autoScroll : true,			region : 'center', 			store : maping_failure_store, 			viewConfig : {				forceFit : true			},			cm : maping_failure_cm, 			//bbar:preview_bbar,			loadMask : {				msg : '正在加载表格数据,请稍等...'			},			listeners: { 	            afteredit: function(val) { 	            	if(val.value==""){	            		val.record.set("standard_name", originalValue);	            	}else{	            		val.record.set("standard_key", value_failure);	            		var  paramValue = {id:val.record.data.id,standard_key:value_failure,standard_name:val.value,falg:"0"};	            		updateDataMaping(paramValue);	            	}	                	            }	        }		});										//表单		var addForm = new Ext.form.FormPanel( {			id : 'dataCleanForm',			name : 'dataCleanForm',			autoScroll:true,  			collapsible : false,			border : true,			labelWidth : 100, // 标签宽度			frame : true, // 是否渲染表单面板背景色			labelAlign : 'right', // 标签对齐方式			bodyStyle : 'padding:0 0 0 0', // 表单元素和表单面板的边距			buttonAlign : 'center',			//height : 700,			items : [{				layout : 'column',				border : false,				anchor : '100%',				items : [{							columnWidth:.01,  //该列占用的宽度，标识为50％							layout: 'form',							defaultType : 'textfield',							border:false,							items: [{								id : 'windowmode',								name : 'windowmode',								hidden : true							},{								id : 'id',								name : 'id',								hidden : true							},{								id : 'sure',								name : 'sure',								hidden : true							}]						},{							columnWidth:1,							layout: 'column',							border:false,							items: [{								columnWidth:.33,								layout: 'form',								labelWidth : 70, // 标签宽度								border:false,								items: [mdMmodelComboBox]}							,{									columnWidth:.32,									layout: 'form',									labelWidth : 60, // 标签宽度									border:false,									items: [mdmModelAttributeComboBox]															}]//选择数据模型						},{							columnWidth:1,							layout : 'form',							labelWidth : 60, // 标签宽度							defaultType : 'textfield',							border : false,							anchor : '100%',							items : [{								id:'createTableFieldset',								xtype:'fieldset',								title: '选择要清洗的主数据表',								autoHeight:true,								anchor : '99%',								collapsed: false,								items :[{									layout : 'column',									border : false,									anchor : '100%',									items : [{										columnWidth:.33,										layout: 'form',										border:false,										items: [mdmDatasourceComboBox]//主数据数据源									},{										columnWidth:.33,										layout: 'form',										border:false,										items: [mdmSchemaNameComboBox]//主数据模式名									},{										columnWidth:.33,										layout: 'form',										border:false,										items: [mdmTableNameComboBox]//主数据表名									}]																	},{									layout : 'column',									border : false,									anchor : '100%',									items : [{										columnWidth:.33,										layout: 'form',										border:false,										items: [columnPrimaryKeyComboBox]//主键字段									},{										columnWidth:.33,										layout: 'form',										border:false,										items: [columnNameComboBox]//名称字段									}]																	},{									layout : 'column',									border : false,									anchor : '100%',									items : [{										columnWidth:.6,										layout: 'form',										border:false,										items: [{											xtype:'textfield',											id:'where_condition_text',											fieldLabel : '过滤条件', // 标签											name : 'mdm_where_condition', // 过滤条件											maxLength : 200,											anchor : '100%'										}]									},{											xtype:'radiogroup',											columnWidth:.19,											id:'id_maping_mode',											style: {										         marginLeft:'20px',//距左边宽度											},		            						items: [		            						    {boxLabel: '模糊匹配映射', name: 'maping_mode', inputValue: '1',checked: true},		                						{boxLabel: '别名映射', name: 'maping_mode', inputValue: '2'}											]									},{										columnWidth:.21,										layout: 'form',										border:false,										items: [{											xtype:'button',											id:'preview_data_button',											text:"映射",//别名映射 ,模糊匹配映射											maxLength : 60,											style: {										         marginLeft:'10px',//距左边宽度											},											handler:function(){												startMaping();//												if(qualified()){//													startMaping();//												}											}										}]									}]																	},{									layout : 'column',									border : false,									anchor : '100%',									items : [{										columnWidth:.5,										layout: 'form',										border:false,										items: [{											xtype:'fieldset',											title: '映射成功列表',											autoHeight:true,											anchor : '99%',											collapsed: false,											items :[maping_success]										}]									},{										columnWidth:.5,										layout: 'form',										border:false,										items: [{											xtype:'fieldset',											title: '映射失败列表',											autoHeight:true,											anchor : '99%',											collapsed: false,											items :[maping_failure]																					}]																			}]								}]							}]						},{							columnWidth:1,							layout : 'form',							labelWidth : 60, // 标签宽度							defaultType : 'textfield',							border : false,							anchor : '100%',							items : [{								id:'createTableFieldset',								xtype:'fieldset',								title: '建立映射关系表',								autoHeight:true,								anchor : '99%',								collapsed: false,								items :[{									layout : 'column',									border : false,									anchor : '100%',									items : [{										columnWidth:.33,										layout: 'form',										border:false,										items: [mapingDatasourceComboBox]									},{										columnWidth:.33,										layout: 'form',										border:false,										items: [mapingSchemaNameComboBox]									},{										columnWidth:.33,										layout: 'form',										border:false,										items: [{											xtype:'textfield',											fieldLabel : '表名', // 标签											id:'maping_table_name', 											name : 'maping_table_name', // 过滤条件											maxLength : 200,											allowBlank : false,											anchor : '100%'																					}]									}]																	}]														}]						}]					}]				});										var addWindow = new Ext.Window( {			layout : 'fit', // 设置窗口布局模式			width : 1100, // 窗口宽度			height : 600, // 窗口高度			modal:true,			resizable : true,// 是否可以改变大小，默认可以			maskdisabled : true,			closeAction : 'hide',			closable : true, // 是否可关闭			collapsible : true, // 是否可收缩			border : false, // 边框线设置			constrain : true, // 设置窗口是否可以溢出父容器			animateTarget : Ext.getBody(),			pageY : 20, // 页面定位Y坐标			pageX : document.body.clientWidth / 2 - 600 /2 -250, // 页面定位X坐标			items : [ addForm ], // 嵌入的表单面板			buttons : [ {				text : '保存',				iconCls : 'acceptIcon',				handler : function() {					var mode = Ext.getCmp('windowmode').getValue();					if (mode == 'add')						submitTheForm();					else						updateTheForm();				}			},{					text : '重置',					id : 'btnReset',					iconCls : 'tbar_synchronizeIcon',					handler : function() {						clearForm(addForm.getForm());					}				},{					text : '关闭',					iconCls : 'deleteIcon',					handler : function() {					addWindow.hide();				}			} ]		});		var viewport = new Ext.Viewport( {			layout : 'border',			items : [grid]		});				function queryItem() {			store.reload({						params : {							start : 0,							limit : bbar.pageSize							//,queryFTPName : Ext.getCmp('queryFTPName').getValue()						}					});		}						function startMaping(){			var dataModel =  mdMmodelComboBox.getValue();//数据模型			var modelAttribute = mdmModelAttributeComboBox.getValue();//数据模型属性			var dataSource= mdmDatasourceComboBox.getValue();//主数据源			var schemaName = mdmSchemaNameComboBox.getValue();//主数据模式名			var tableName = mdmTableNameComboBox.getValue();			var primaryKey = columnPrimaryKeyComboBox.getValue();			var primaryName = columnNameComboBox.getValue();			var whereCondition = Ext.getCmp('where_condition_text').getValue();			var rg = Ext.getCmp('id_maping_mode');			var mapingMode = rg.getValue();			 Ext.Ajax.request({				 	timeout: 3600000,	                url: '../mdmDataClean/startMaping.shtml',	                params: { dataModel: dataModel,modelAttribute:modelAttribute, dataSource: dataSource, 	                		  schemaName: schemaName,tableName: tableName,mapingMode:mapingMode.inputValue,	                		  primaryKey: primaryKey,primaryName: primaryName,whereCondition: whereCondition	                },	                method: 'POST',	                success: function (response, options) {	                	var json = Ext.util.JSON.decode(response.responseText);  	                	if(json.success==true){	                		maping_success_store.reload({params : {falg : 1}});	                		maping_failure_store.reload({params : {falg : 0}});	                			                	}else{	                		Ext.MessageBox.alert('错误提示',json.msg );	                	}	                    	                },	                failure: function (response, options) {	                    Ext.MessageBox.alert('失败', '请求超时或网络故障,错误编号：' + response.status);	                }	            });		}						/**		 * 新增窗体初始化		 */		function addItem() {			var flag = Ext.getCmp('windowmode').getValue();			if (typeof(flag) != 'undefined') {				addForm.form.getEl().dom.reset();			} else {				clearForm(addForm.getForm());			}			maping_success_store.removeAll();      		maping_failure_store.removeAll(); 			addWindow.show(); // 显示窗口			addWindow.setTitle('<span class="commoncss">新增</span>');			Ext.getCmp('windowmode').setValue('add');			var rg = Ext.getCmp('id_maping_mode');			var r = rg.getValue();			rg.setValue(1);		}		/**		 * 新增		 */		function submitTheForm() {			if (!addForm.getForm().isValid())				return;			addForm.form.submit( {				url : '../mdmDataClean/save.shtml',				waitTitle : '提示',				method : 'POST',				waitMsg : '正在处理数据,请稍候...',				success : function(form, action) {															if("status" in action.result  && "5001"== action.result.status ){						Ext.getCmp('sure').setValue("");						Ext.MessageBox.confirm('请确认', action.result.msg, function(btn, text) {							if (btn == 'yes') {								Ext.getCmp('sure').setValue(1);								submitTheForm();															}						});											}else if("status" in action.result  && "5000"== action.result.status){						Ext.MessageBox.alert('提示', action.result.msg);					}else{						if(action.result.success==true){							Ext.MessageBox.alert('提示', action.result.msg);							form.reset();							addWindow.hide();							queryItem();						}else{							Ext.MessageBox.alert('提示', action.result.msg);						}					}				},				failure : function(form, action) {					Ext.MessageBox.alert('提示', '数据保存失败');				}			});		}								/**		 * 修改		 */		function updateItem() {			var record = grid.getSelectionModel().getSelected();			if (Ext.isEmpty(record)) {				Ext.Msg.alert('提示:', '请先选中要修改的数据');				return;			}			maping_success_store.removeAll();      		maping_failure_store.removeAll(); 			addForm.getForm().loadRecord(record);			addWindow.show(); // 显示窗口			addWindow.setTitle('<span class="commoncss">修改</span>');			Ext.getCmp('windowmode').setValue('edit');						maping_success_store.reload({params : {falg : 3,id:record.data.id}});						var id_model = mdMmodelComboBox.value;			mdmModelAttributeStore.load({				params : {					id_model : id_model,				}			});			//名称为主键设置为不可修改			//Ext.getCmp('name').el.dom.readOnly = true;				//Ext.getCmp('name').el.dom.style.color = "grey";		}		/**		 * 修改		 */		function updateTheForm() {			if (!addForm.getForm().isValid())				return;			addForm.form.submit( {				url : '../mdmDataClean/update.shtml',				waitTitle : '提示',				method : 'POST',				waitMsg : '正在处理数据,请稍候...',				success : function(form, action) { // 回调函数有2个参数					if("status" in action.result  && "5001"== action.result.status ){						Ext.getCmp('sure').setValue("");						Ext.MessageBox.confirm('请确认', action.result.msg, function(btn, text) {							if (btn == 'yes') {								Ext.getCmp('sure').setValue(1);								updateTheForm();															}						});											}else if("status" in action.result  && "5000"== action.result.status){						Ext.MessageBox.alert('提示', action.result.msg);					}else{						if(action.result.success==true){							Ext.MessageBox.alert('提示', action.result.msg);							form.reset();							addWindow.hide();							queryItem();						}else{							Ext.MessageBox.alert('提示', action.result.msg);						}					}														},				failure : function(form, action) {					Ext.Msg.alert('提示', action.result.msg);				}			});		}		/**		 * 删除		 * 		 */		function deleteItem() {			var record = grid.getSelectionModel().getSelections();			if (Ext.isEmpty(record)) {				Ext.Msg.alert('提示', '请先选中要删除的数据!');				return;			}			var strChecked = jsArray2JsString(record, 'id');			var delTable = 0;			Ext.Msg.confirm('请确认', '你真的要删除吗?<br><br><input id="deleteMapingTable" type="checkbox">同时删除映射关系表', function(btn, text) {				if (btn == 'yes') {										if(Ext.get("deleteMapingTable").dom.checked){						delTable = 1;					}					showWaitMsg();					Ext.Ajax.request( {						url : '../mdmDataClean/delete.shtml',						success : function(response) {							queryItem();							Ext.MessageBox.alert('提示', '删除成功');						},						failure : function(response) {							var resultArray = Ext.util.JSON									.decode(response.responseText);							Ext.Msg.alert('提示', resultArray.msg);						},						params : {							ids : strChecked,							delTable:delTable						}					});				}			});		}		modifyMdmTable = function(){		if(checkBeforeUpdate(grid)) {			updateItem();		}		}					/**		 * 在点击【修改】按钮前，判断是不是有选择且只选择了一条记录		 */		function checkBeforeUpdate(grid) {			var selModel = grid.getSelectionModel();			if(selModel) {				var selects = selModel.getSelections();				if(!(selects && selects.length == 1)) {					Ext.MessageBox.alert('提示', '请先选择一条需要修改的记录！');					return false;				}			}			return true;		}		/**		 * 在点击【删除】按钮前，判断是否至少选择了一条记录		 */		function checkBeforeDelete(grid) {			var selModel = grid.getSelectionModel();			if(selModel) {				var selects = selModel.getSelections();				if(!(selects && selects.length > 0)) {					Ext.MessageBox.alert('提示', '请先至少选择一条记录！');					return false;				}			}			return true;		}				/****		 * 点击映射按钮时 判断from表单是否填写完成		 */		function qualified(){			return mdMmodelComboBox.validate() 				&mdmDatasourceComboBox.validate() 				&mdmTableNameComboBox.validate() 				&columnPrimaryKeyComboBox.validate() 				&columnNameComboBox.validate()				&mdmModelAttributeComboBox.validate();					}				function updateDataMaping(paramValue){			Ext.Ajax.request({				url : '../mdmDataClean/updateDataMaping.shtml',                params: paramValue,                method: 'POST',                success: function (response, options) {                                    },                failure: function (response, options) {                                    }            });		}					});