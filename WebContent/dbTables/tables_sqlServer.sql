--# thanks to George Papastamatopoulos for submitting this ... and Marko Lahma for
--# updating it.
--#
--# In your Quartz properties file, you'll need to set 
--# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.MSSQLDelegate
--#
--# you shouse enter your DB instance's name on the next line in place of "enter_db_name_here"
--#
--#
--# From a helpful (but anonymous) Quartz user:
--#
--# Regarding this error message:  
--#
--#     [Microsoft][SQLServer 2000 Driver for JDBC]Can't start a cloned connection while in manual transaction mode.
--#
--#
--#     I added "SelectMethod=cursor;" to my Connection URL in the config file. 
--#     It Seems to work, hopefully no side effects.
--#
--#		example:
--#		"jdbc:microsoft:sqlserver://dbmachine:1433;SelectMethod=cursor"; 
--#
--# Another user has pointed out that you will probably need to use the 
--# JTDS driver
--#


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_JOB_LISTENERS_QRTZ_JOB_DETAILS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
ALTER TABLE [dbo].[QRTZ_JOB_LISTENERS] DROP CONSTRAINT FK_QRTZ_JOB_LISTENERS_QRTZ_JOB_DETAILS


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
ALTER TABLE [dbo].[QRTZ_TRIGGERS] DROP CONSTRAINT FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] DROP CONSTRAINT FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] DROP CONSTRAINT FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK_QRTZ_TRIGGER_LISTENERS_QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISFOREIGNKEY') = 1)
ALTER TABLE [dbo].[QRTZ_TRIGGER_LISTENERS] DROP CONSTRAINT FK_QRTZ_TRIGGER_LISTENERS_QRTZ_TRIGGERS


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_CALENDARS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_CALENDARS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_CRON_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_CRON_TRIGGERS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_BLOB_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_BLOB_TRIGGERS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_FIRED_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_FIRED_TRIGGERS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_PAUSED_TRIGGER_GRPS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SCHEDULER_STATE]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_SCHEDULER_STATE]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_LOCKS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_LOCKS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_JOB_DETAILS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_JOB_DETAILS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_JOB_LISTENERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_JOB_LISTENERS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_SIMPLE_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_TRIGGER_LISTENERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_TRIGGER_LISTENERS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[QRTZ_TRIGGERS]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[QRTZ_TRIGGERS]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[KDI_T_IMPACTLINEAGE]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[KDI_T_IMPACTLINEAGE]


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[KDI_T_RELATIONSHIP]') AND OBJECTPROPERTY(id, N'ISUSERTABLE') = 1)
DROP TABLE [dbo].[KDI_T_RELATIONSHIP]


CREATE TABLE [dbo].[QRTZ_CALENDARS] (
  [CALENDAR_NAME] [VARCHAR] (80)  NOT NULL ,
  [CALENDAR] [IMAGE] NOT NULL
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_CRON_TRIGGERS] (
  [TRIGGER_NAME] [VARCHAR] (80)  NOT NULL ,
  [TRIGGER_GROUP] [VARCHAR] (80)  NOT NULL ,
  [CRON_EXPRESSION] [VARCHAR] (80)  NOT NULL ,
  [TIME_ZONE_ID] [VARCHAR] (80) 
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_FIRED_TRIGGERS] (
  [ENTRY_ID] [VARCHAR] (95)  NOT NULL ,
  [TRIGGER_NAME] [VARCHAR] (80)  NOT NULL ,
  [TRIGGER_GROUP] [VARCHAR] (80)  NOT NULL ,
  [IS_VOLATILE] [VARCHAR] (1)  NOT NULL ,
  [INSTANCE_NAME] [VARCHAR] (80)  NOT NULL ,
  [FIRED_TIME] [BIGINT] NOT NULL ,
  [STATE] [VARCHAR] (16)  NOT NULL,
  [JOB_NAME] [VARCHAR] (80)  NULL ,
  [JOB_GROUP] [VARCHAR] (80)  NULL ,
  [IS_STATEFUL] [VARCHAR] (1)  NULL ,
  [REQUESTS_RECOVERY] [VARCHAR] (1)  NULL 
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS] (
  [TRIGGER_GROUP] [VARCHAR] (80)  NOT NULL 
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_SCHEDULER_STATE] (
  [INSTANCE_NAME] [VARCHAR] (80)  NOT NULL ,
  [LAST_CHECKIN_TIME] [BIGINT] NOT NULL ,
  [CHECKIN_INTERVAL] [BIGINT] NOT NULL ,
  [RECOVERER] [VARCHAR] (80)  NULL 
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_LOCKS] (
  [LOCK_NAME] [VARCHAR] (40)  NOT NULL 
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_JOB_DETAILS] (
  [JOB_NAME] [VARCHAR] (80)  NOT NULL ,
  [JOB_GROUP] [VARCHAR] (80)  NOT NULL ,
  [DESCRIPTION] [VARCHAR] (120) NULL ,
  [JOB_CLASS_NAME] [VARCHAR] (128)  NOT NULL ,
  [IS_DURABLE] [VARCHAR] (1)  NOT NULL ,
  [IS_VOLATILE] [VARCHAR] (1)  NOT NULL ,
  [IS_STATEFUL] [VARCHAR] (1)  NOT NULL ,
  [REQUESTS_RECOVERY] [VARCHAR] (1)  NOT NULL ,
  [JOB_DATA] [IMAGE] NULL
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_JOB_LISTENERS] (
  [JOB_NAME] [VARCHAR] (80)  NOT NULL ,
  [JOB_GROUP] [VARCHAR] (80)  NOT NULL ,
  [JOB_LISTENER] [VARCHAR] (80)  NOT NULL
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] (
  [TRIGGER_NAME] [VARCHAR] (80)  NOT NULL ,
  [TRIGGER_GROUP] [VARCHAR] (80)  NOT NULL ,
  [REPEAT_COUNT] [BIGINT] NOT NULL ,
  [REPEAT_INTERVAL] [BIGINT] NOT NULL ,
  [TIMES_TRIGGERED] [BIGINT] NOT NULL
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_BLOB_TRIGGERS] (
  [TRIGGER_NAME] [VARCHAR] (80)  NOT NULL ,
  [TRIGGER_GROUP] [VARCHAR] (80)  NOT NULL ,
  [BLOB_DATA] [IMAGE] NULL
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_TRIGGER_LISTENERS] (
  [TRIGGER_NAME] [VARCHAR] (80)  NOT NULL ,
  [TRIGGER_GROUP] [VARCHAR] (80)  NOT NULL ,
  [TRIGGER_LISTENER] [VARCHAR] (80)  NOT NULL
) ON [PRIMARY]


CREATE TABLE [dbo].[QRTZ_TRIGGERS] (
  [TRIGGER_NAME] [VARCHAR] (80)  NOT NULL ,
  [TRIGGER_GROUP] [VARCHAR] (80)  NOT NULL ,
  [JOB_NAME] [VARCHAR] (80)  NOT NULL ,
  [JOB_GROUP] [VARCHAR] (80)  NOT NULL ,
  [IS_VOLATILE] [VARCHAR] (1)  NOT NULL ,
  [DESCRIPTION] [VARCHAR] (120) NULL ,
  [NEXT_FIRE_TIME] [BIGINT] NULL ,
  [PREV_FIRE_TIME] [BIGINT] NULL ,
  [TRIGGER_STATE] [VARCHAR] (16)  NOT NULL ,
  [TRIGGER_TYPE] [VARCHAR] (8)  NOT NULL ,
  [START_TIME] [BIGINT] NOT NULL ,
  [END_TIME] [BIGINT] NULL ,
  [CALENDAR_NAME] [VARCHAR] (80)  NULL ,
  [MISFIRE_INSTR] [SMALLINT] NULL ,
  [JOB_DATA] [IMAGE] NULL
) ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_CALENDARS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_CALENDARS] PRIMARY KEY  CLUSTERED
  (
    [CALENDAR_NAME]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_CRON_TRIGGERS] PRIMARY KEY  CLUSTERED
  (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_FIRED_TRIGGERS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_FIRED_TRIGGERS] PRIMARY KEY  CLUSTERED
  (
    [ENTRY_ID]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_PAUSED_TRIGGER_GRPS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_PAUSED_TRIGGER_GRPS] PRIMARY KEY  CLUSTERED
  (
    [TRIGGER_GROUP]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_SCHEDULER_STATE] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_SCHEDULER_STATE] PRIMARY KEY  CLUSTERED
  (
    [INSTANCE_NAME]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_LOCKS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_LOCKS] PRIMARY KEY  CLUSTERED
  (
    [LOCK_NAME]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_JOB_DETAILS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_JOB_DETAILS] PRIMARY KEY  CLUSTERED
  (
    [JOB_NAME],
    [JOB_GROUP]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_JOB_LISTENERS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_JOB_LISTENERS] PRIMARY KEY  CLUSTERED
  (
    [JOB_NAME],
    [JOB_GROUP],
    [JOB_LISTENER]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_SIMPLE_TRIGGERS] PRIMARY KEY  CLUSTERED
  (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_TRIGGER_LISTENERS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_TRIGGER_LISTENERS] PRIMARY KEY  CLUSTERED
  (
    [TRIGGER_NAME],
    [TRIGGER_GROUP],
    [TRIGGER_LISTENER]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_TRIGGERS] WITH NOCHECK ADD
  CONSTRAINT [PK_QRTZ_TRIGGERS] PRIMARY KEY  CLUSTERED
  (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  )  ON [PRIMARY]


ALTER TABLE [dbo].[QRTZ_CRON_TRIGGERS] ADD
  CONSTRAINT [FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY
  (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  ) REFERENCES [dbo].[QRTZ_TRIGGERS] (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  ) ON DELETE CASCADE


ALTER TABLE [dbo].[QRTZ_JOB_LISTENERS] ADD
  CONSTRAINT [FK_QRTZ_JOB_LISTENERS_QRTZ_JOB_DETAILS] FOREIGN KEY
  (
    [JOB_NAME],
    [JOB_GROUP]
  ) REFERENCES [dbo].[QRTZ_JOB_DETAILS] (
    [JOB_NAME],
    [JOB_GROUP]
  ) ON DELETE CASCADE


ALTER TABLE [dbo].[QRTZ_SIMPLE_TRIGGERS] ADD
  CONSTRAINT [FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS] FOREIGN KEY
  (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  ) REFERENCES [dbo].[QRTZ_TRIGGERS] (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  ) ON DELETE CASCADE


ALTER TABLE [dbo].[QRTZ_TRIGGER_LISTENERS] ADD
  CONSTRAINT [FK_QRTZ_TRIGGER_LISTENERS_QRTZ_TRIGGERS] FOREIGN KEY
  (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  ) REFERENCES [dbo].[QRTZ_TRIGGERS] (
    [TRIGGER_NAME],
    [TRIGGER_GROUP]
  ) ON DELETE CASCADE


ALTER TABLE [dbo].[QRTZ_TRIGGERS] ADD
  CONSTRAINT [FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS] FOREIGN KEY
  (
    [JOB_NAME],
    [JOB_GROUP]
  ) REFERENCES [dbo].[QRTZ_JOB_DETAILS] (
    [JOB_NAME],
    [JOB_GROUP]
  )


INSERT INTO [dbo].[QRTZ_LOCKS] VALUES('TRIGGER_ACCESS');
INSERT INTO [dbo].[QRTZ_LOCKS] VALUES('JOB_ACCESS');
INSERT INTO [dbo].[QRTZ_LOCKS] VALUES('CALENDAR_ACCESS');
INSERT INTO [dbo].[QRTZ_LOCKS] VALUES('STATE_ACCESS');
INSERT INTO [dbo].[QRTZ_LOCKS] VALUES('MISFIRE_ACCESS');


CREATE TABLE [dbo].[KDI_T_MONITOR](
	[ID] [INTEGER] NOT NULL PRIMARY KEY,
	[JOBNAME] [VARCHAR](80) NOT NULL ,
	[JOBGROUP] [VARCHAR](80),
	[JOBFILE] [VARCHAR](200),
	[JOBSTATUS] [VARCHAR](50),
	[START_TIME] [DATETIME],
	[END_TIME] [DATETIME],
	[CONTINUED_TIME] [NUMERIC](13,1),
	[LOGMSG] [TEXT],
	[ERRMSG] [VARCHAR](4000),
	[LINES_READ] [INTEGER],
	[LINES_WRITTEN] [INTEGER],
	[LINES_UPDATED] [INTEGER],
	[LINES_INPUT] [INTEGER],
	[LINES_OUTPUT] [INTEGER],
	[LINES_ERROR] [INTEGER],
	[LINES_DELETED] [INTEGER],
	[USERID] [VARCHAR](20),
	[ID_CLUSTER] [INTEGER],
	[ID_SLAVE] [INTEGER],
	[ID_BATCH] [INTEGER]
)


CREATE TABLE [dbo].[KDI_T_IMPACTLINEAGE] (
  [COLUMN_ID] [INTEGER],
  [DATABASE_NAME] [VARCHAR](80),
  [SCHEMA_NAME] [VARCHAR](80),
  [TABLE_NAME] [VARCHAR](80),
  [COLUMN_NAME] [VARCHAR](80),
  [COLUMN_LABEL] [VARCHAR](80),
  [COLUMN_TYPE] [INTEGER],
  [COLUMN_PRECISION] [INTEGER],
  [COLUMN_SCALE] [INTEGER],
  [COLUMN_TYPE_NAME] [VARCHAR](80),
  [COLUMN_LENGTH] [INTEGER],
  [REPOSITORY_NAME] [VARCHAR](80),
  [TRANS_PATH] [VARCHAR](80),
  [TRANS_ID] [INTEGER],
  [TRANS_NAME] [VARCHAR](80),
  [ORIGIN_STEP_NAME] [VARCHAR](80),
  [OPERATION] [VARCHAR](20)
)


CREATE TABLE [dbo].[KDI_T_RELATIONSHIP] (
  [JOB_ID] [INTEGER],
  [JOB_SUB_ID] [INTEGER],
  [TRANS_ID] [INTEGER]
)


-- 登陆日志
CREATE TABLE [dbo].[KDI_T_LOGIN_LOG] (
  [C_USER_ID] [INTEGER] ,
  [C_LOGIN_TIME] [DATETIME] 
)


-- 操作类型
CREATE TABLE [dbo].[KDI_T_OPTERATION] (
  [C_OPERATION_ID] [INTEGER] NOT NULL,
  [C_OPERATION_NAME] [VARCHAR](32) DEFAULT NULL,
  PRIMARY KEY  (C_OPERATION_ID)
)


INSERT INTO [dbo].[KDI_T_OPTERATION] VALUES (1,'新建');
INSERT INTO [dbo].[KDI_T_OPTERATION] VALUES (2,'删除');
INSERT INTO [dbo].[KDI_T_OPTERATION] VALUES (4,'修改');
INSERT INTO [dbo].[KDI_T_OPTERATION] VALUES (8,'执行');
INSERT INTO [dbo].[KDI_T_OPTERATION] VALUES (16,'浏览');


-- 权限
CREATE TABLE [dbo].[KDI_T_PRIVILEDGE] (
  [C_PRIVILEDGE_ID] [BIGINT] NOT NULL,
  [C_RESOURCE_TYPE_ID] [INTEGER] DEFAULT NULL,
  [C_OPERATION_ID] [INTEGER] DEFAULT NULL,
  PRIMARY KEY  (C_PRIVILEDGE_ID)
)


INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(1,1,1);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(2,2,1);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(4,4,1);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(8,8,1);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(16,16,1);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(32,1,2);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(64,2,2);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(128,4,2);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(256,8,2);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(512,16,2);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(1024,1,4);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(2048,2,4);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(4096,4,4);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(8192,8,4);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(16384,16,4);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(32768,1,8);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(65536,1,16);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(131072,2,16);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(262144,4,16);
INSERT INTO [dbo].[KDI_T_PRIVILEDGE] VALUES(524288,8,16);



-- 资源库
CREATE TABLE [dbo].[KDI_T_REPOSITORY] (
  [C_REPOSITORY_ID] [INTEGER] NOT NULL,
  [C_REPOSITORY_NAME] [VARCHAR](32) DEFAULT NULL,
  [C_USER_NAME] [VARCHAR](32) DEFAULT NULL,
  [C_PASSWORD] [VARCHAR](32) DEFAULT NULL,
  [C_VERSION] [VARCHAR](16) DEFAULT NULL,
  [C_DB_HOST] [VARCHAR](32) DEFAULT NULL,
  [C_DB_PORT] [VARCHAR](8) DEFAULT NULL,
  [C_DB_NAME] [VARCHAR](64) DEFAULT NULL,
  [C_DB_TYPE] [VARCHAR](32) DEFAULT NULL,
  [C_DB_ACCESS] [VARCHAR](16) DEFAULT NULL,
  PRIMARY KEY  (C_REPOSITORY_ID)
)


-- 资源类型
CREATE TABLE [dbo].[KDI_T_RESOURCE_TYPE] (
  [C_RESOURCE_TYPE_ID] [INTEGER] NOT NULL,
  [C_RESOURCE_TYPE_NAME][VARCHAR](32) DEFAULT NULL,
  PRIMARY KEY  (C_RESOURCE_TYPE_ID)
)


INSERT INTO [dbo].[KDI_T_RESOURCE_TYPE] VALUES (1,'目录');
INSERT INTO [dbo].[KDI_T_RESOURCE_TYPE] VALUES (2,'文件');
INSERT INTO [dbo].[KDI_T_RESOURCE_TYPE] VALUES (4,'用户');
INSERT INTO [dbo].[KDI_T_RESOURCE_TYPE] VALUES (8,'角色');
INSERT INTO [dbo].[KDI_T_RESOURCE_TYPE] VALUES (16,'集群');


-- 角色
CREATE TABLE [dbo].[KDI_T_ROLE] (
  [C_ROLE_ID] [INTEGER] NOT NULL,
  [C_ROLE_NAME] [VARCHAR](32) UNIQUE NOT NULL,
  [C_DESCRIPTION] [VARCHAR](255) DEFAULT NULL,
  [C_PRIVILEDGES] [BIGINT] DEFAULT NULL,
  [C_ISSYSTEMROLE] [INTEGER] DEFAULT NULL,
  PRIMARY KEY  (C_ROLE_ID)
)


INSERT INTO [dbo].[KDI_T_ROLE] VALUES (0,'Administrator','系统管理员角色,拥有所有的权限',-1,1);
INSERT INTO [dbo].[KDI_T_ROLE] VALUES (1,'Developer','系统开发者角色,对目录、文件具有新建、执行、修改、删除权限',29491,1);
INSERT INTO [dbo].[KDI_T_ROLE] VALUES (2,'Operator','系统执行者角色,对目录、文件具有浏览、执行权限',28672,1);
INSERT INTO [dbo].[KDI_T_ROLE] VALUES (3,'Guest','系统访客角色,对目录、文件具有浏览权限',24576,1);


-- 用户
CREATE TABLE [dbo].[KDI_T_USER] (
  [C_USER_ID] [INTEGER] NOT NULL,
  [C_USER_NAME] [VARCHAR](32) UNIQUE NOT NULL,
  [C_PASSWORD] [VARCHAR](32) DEFAULT NULL,
  [C_NICK_NAME] [VARCHAR](32) DEFAULT NULL,
  [C_EMAIL] [VARCHAR](32) DEFAULT NULL,
  [C_MOBILEPHONE] [VARCHAR](32) DEFAULT NULL,
  [C_DESCRIPTION] [VARCHAR](255) DEFAULT NULL,
  [C_IS_SYSTEM_USER][INTEGER] DEFAULT NULL,
  PRIMARY KEY  (c_user_id)
)


INSERT INTO [dbo].[KDI_T_USER] VALUES (0,'admin','admin','管理员','','','系统管理员用户,拥有所有资源授权和所有操作权限',1);
INSERT INTO [dbo].[KDI_T_USER] VALUES (1,'developer','developer','开发者','','','系统开发者用户,拥有Guest目录的资源授权和目录文件的增、删、改、执行、浏览权限',1);
INSERT INTO [dbo].[KDI_T_USER] VALUES (2,'operator','operator','执行者','','','系统执行者用户,拥有Guest目录的资源授权和目录文件的浏览、执行权限',1);
INSERT INTO [dbo].[KDI_T_USER] VALUES (3,'guest','guest','访客','','','系统访客用户,拥有Guest目录的资源授权和目录文件的浏览权限',1);


-- 用户角色
CREATE TABLE [dbo].[KDI_T_USER_ROLE] (
  [C_USER_ID] [INTEGER] NOT NULL,
  [C_ROLE_ID] [INTEGER] NOT NULL,
  PRIMARY KEY  (C_USER_ID,C_ROLE_ID)
)


INSERT INTO [dbo].[KDI_T_USER_ROLE] VALUES (0,0);
INSERT INTO [dbo].[KDI_T_USER_ROLE] VALUES (1,1);
INSERT INTO [dbo].[KDI_T_USER_ROLE] VALUES (2,2);
INSERT INTO [dbo].[KDI_T_USER_ROLE] VALUES (3,3);

-- HA集群表
CREATE TABLE [dbo].[KDI_T_HA_CLUSTER] (
  [ID_CLUSTER] integer NOT NULL,
  [NAME] varchar(255) default NULL,
  [BASE_PORT] varchar(255) default NULL,
  [SOCKETS_BUFFER_SIZE] varchar(255) default NULL,
  [SOCKETS_FLUSH_INTERVAL] varchar(255) default NULL,
  [SOCKETS_COMPRESSED] char(1) default NULL,
  [DYNAMIC_CLUSTER] char(1) default NULL,
  PRIMARY KEY  (ID_CLUSTER)
) ;

-- 集群与远程ETL服务器关联表
CREATE TABLE [dbo].[KDI_T_HA_CLUSTER_SLAVE] (
  [ID_CLUSTER_SLAVE] integer NOT NULL,
  [ID_CLUSTER] integer default NULL,
  [ID_SLAVE] integer default NULL,
  PRIMARY KEY  (ID_CLUSTER_SLAVE)
) ;

-- 远程ETL服务器表
CREATE TABLE [dbo].[KDI_T_HA_SLAVE] (
  [ID_SLAVE] integer NOT NULL,
  [NAME] varchar(255) default NULL,
  [HOST_NAME] varchar(255) default NULL,
  [PORT] varchar(255) default NULL,
  [WEB_APP_NAME] varchar(255) default NULL,
  [USERNAME] varchar(255) default NULL,
  [PASSWORD] varchar(255) default NULL,
  [PROXY_HOST_NAME] varchar(255) default NULL,
  [PROXY_PORT] varchar(255) default NULL,
  [NON_PROXY_HOSTS] varchar(255) default NULL,
  [MASTER] char(1) default NULL,
  PRIMARY KEY  (ID_SLAVE)
) ;

-- 远程ETL服务器状态表
CREATE TABLE [dbo].[KDI_T_HA_SLAVE_STATUS] (
  [ID_STATUS] integer default NULL,
  [ID_SLAVE] integer default NULL,
  [IS_RUNING] integer default NULL,
  [CPU_USAGE] float default NULL,
  [MEMORY_USAGE] float default NULL,
  [RUNING_JOBS_NUM] integer default NULL
) ;

-- 平台邮件服务器配置表
CREATE TABLE [dbo].[KDI_T_MAIL] (
  [SMTP_SERVER] varchar(200) default NULL,
  [SMTP_PORT] integer default NULL,
  [USER_NAME] varchar(200) default NULL,
  [PASSWD] varchar(200) default NULL
) ;

-- 平台数据源配置表
CREATE TABLE [dbo].[KDI_T_FAST_CONFIG] (
  [ID_CONFIG] integer NOT NULL default '0',
  [ID_SOURCE_TYP] integer default NULL COMMENT '1 databsae, 2 ftp, 3 hadoop',
  [ID_SOURCE_DATABASE] integer default NULL,
  [ID_SOURCE_FTP] integer default NULL,
  [ID_SOURCE_HADOOP] integer default NULL,
  [SOURCE_TABLE_NAME] varchar(50) default NULL,
  [SOURCE_CONDITION] varchar(500) default NULL,
  [SOURCE_FILE_PATH] varchar(500) default NULL,
  [SOURCE_FILE_NAME] varchar(50) default NULL,
  [SOURCE_SEPERATOR] varchar(1) default NULL,
  [ID_DEST_TYPE] integer default NULL COMMENT '1 databsae, 2 ftp, 3 hadoop',
  [ID_DEST_DATABASE] integer default NULL,
  [ID_DEST_FTP] integer default NULL,
  [ID_DEST_HADOOP] integer default NULL,
  [DEST_TABLE_NAME] varchar(50) default NULL,
  [DEST_FILE_PATH] varchar(500) default NULL,
  [DEST_FILE_NAME] varchar(50) default NULL,
  [LOAD_TYPE] integer default NULL COMMENT '1 全量  2 增量',
  PRIMARY KEY  (ID_CONFIG)
);

CREATE TABLE [KDI_T_FAST_CONFIG_ITEM] (
  [ID_CONFIG_ITEM] integer NOT NULL auto_increment,
  [ID_CONFIG] integer NOT NULL default '0',
  [SOURCE_COLUMN_NAME] varchar(50) default NULL,
  [SOURCE_COLUMN_TYPE] varchar(500) default NULL,
  [DEST_COLUMN_NAME] varchar(50) default NULL,
  [DEST_COLUMN_TYPE] varchar(500) default NULL,
  [DEST_LENGTH] integer default NULL,
  [IS_PRIMARY] char(1) default NULL,
  [IS_NULLABLE] char(1) default NULL,
  [START_INDEX] integer default NULL,
  [END_INDEX] integer default NULL COMMENT '1 databsae, 2 ftp, 3 hadoop',
  PRIMARY KEY  (ID_CONFIG_ITEM)
);

CREATE TABLE [KDI_T_FTP] (
  [ID_FTP] integer default NULL,
  [NAME] varchar(30) default NULL,
  [HOST_NAME] varchar(30) default NULL,
  [PORT] integer default NULL,
  [USERNAME] varchar(20) default NULL,
  [PASSWORD] varchar(20) default NULL
);

CREATE TABLE [KDI_T_HADOOP] (
  [ID] integer default NULL,
  [SERVER] varchar(50) default NULL,
  [PORT] integer default NULL,
  [USERID] varchar(50) default NULL,
  [PASSWORD] varchar(50) default NULL
);

CREATE TABLE [KDI_T_PARAMETER] (
  [ID] int(11) NOT NULL auto_increment,
  [KEY] varchar(100) default NULL,
  [VALUE] varchar(500) default NULL,
  PRIMARY KEY  (ID)
);
